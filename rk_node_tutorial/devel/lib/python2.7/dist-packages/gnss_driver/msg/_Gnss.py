# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_driver/Gnss.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gnss_driver.msg
import std_msgs.msg

class Gnss(genpy.Message):
  _md5sum = "de82954b18f7418bd62c4ba27cf8d96f"
  _type = "gnss_driver/Gnss"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 measurement_time
float32 velocity_latency
PointLLH position
Point3D position_std_dev
Point3D linear_velocity
Point3D linear_velocity_std_dev
int32 num_sats

int32 INVALID=0
int32 PROPAGATED=1
int32 SINGLE=2
int32 PSRDIFF=3
int32 PPP=4
int32 RTK_FLOAT=5
int32 RTK_INTEGER=6

int32 type
uint32 solution_status
uint32 position_type

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: gnss_driver/PointLLH
float64 lon
float64 lat
float64 height

================================================================================
MSG: gnss_driver/Point3D
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  INVALID = 0
  PROPAGATED = 1
  SINGLE = 2
  PSRDIFF = 3
  PPP = 4
  RTK_FLOAT = 5
  RTK_INTEGER = 6

  __slots__ = ['header','measurement_time','velocity_latency','position','position_std_dev','linear_velocity','linear_velocity_std_dev','num_sats','type','solution_status','position_type']
  _slot_types = ['std_msgs/Header','float64','float32','gnss_driver/PointLLH','gnss_driver/Point3D','gnss_driver/Point3D','gnss_driver/Point3D','int32','int32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,measurement_time,velocity_latency,position,position_std_dev,linear_velocity,linear_velocity_std_dev,num_sats,type,solution_status,position_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gnss, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.measurement_time is None:
        self.measurement_time = 0.
      if self.velocity_latency is None:
        self.velocity_latency = 0.
      if self.position is None:
        self.position = gnss_driver.msg.PointLLH()
      if self.position_std_dev is None:
        self.position_std_dev = gnss_driver.msg.Point3D()
      if self.linear_velocity is None:
        self.linear_velocity = gnss_driver.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = gnss_driver.msg.Point3D()
      if self.num_sats is None:
        self.num_sats = 0
      if self.type is None:
        self.type = 0
      if self.solution_status is None:
        self.solution_status = 0
      if self.position_type is None:
        self.position_type = 0
    else:
      self.header = std_msgs.msg.Header()
      self.measurement_time = 0.
      self.velocity_latency = 0.
      self.position = gnss_driver.msg.PointLLH()
      self.position_std_dev = gnss_driver.msg.Point3D()
      self.linear_velocity = gnss_driver.msg.Point3D()
      self.linear_velocity_std_dev = gnss_driver.msg.Point3D()
      self.num_sats = 0
      self.type = 0
      self.solution_status = 0
      self.position_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_df12d2i2I().pack(_x.measurement_time, _x.velocity_latency, _x.position.lon, _x.position.lat, _x.position.height, _x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.num_sats, _x.type, _x.solution_status, _x.position_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = gnss_driver.msg.PointLLH()
      if self.position_std_dev is None:
        self.position_std_dev = gnss_driver.msg.Point3D()
      if self.linear_velocity is None:
        self.linear_velocity = gnss_driver.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = gnss_driver.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.measurement_time, _x.velocity_latency, _x.position.lon, _x.position.lat, _x.position.height, _x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.num_sats, _x.type, _x.solution_status, _x.position_type,) = _get_struct_df12d2i2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_df12d2i2I().pack(_x.measurement_time, _x.velocity_latency, _x.position.lon, _x.position.lat, _x.position.height, _x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.num_sats, _x.type, _x.solution_status, _x.position_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = gnss_driver.msg.PointLLH()
      if self.position_std_dev is None:
        self.position_std_dev = gnss_driver.msg.Point3D()
      if self.linear_velocity is None:
        self.linear_velocity = gnss_driver.msg.Point3D()
      if self.linear_velocity_std_dev is None:
        self.linear_velocity_std_dev = gnss_driver.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.measurement_time, _x.velocity_latency, _x.position.lon, _x.position.lat, _x.position.height, _x.position_std_dev.x, _x.position_std_dev.y, _x.position_std_dev.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_velocity_std_dev.x, _x.linear_velocity_std_dev.y, _x.linear_velocity_std_dev.z, _x.num_sats, _x.type, _x.solution_status, _x.position_type,) = _get_struct_df12d2i2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_df12d2i2I = None
def _get_struct_df12d2i2I():
    global _struct_df12d2i2I
    if _struct_df12d2i2I is None:
        _struct_df12d2i2I = struct.Struct("<df12d2i2I")
    return _struct_df12d2i2I
