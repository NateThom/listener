# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_driver/RangeInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RangeInfo(genpy.Message):
  _md5sum = "6792b8c07d815111a6e39320c1f1b541"
  _type = "gnss_driver/RangeInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 GPS=0
int32 GLONASS=1
int32 SBAS=2
int32 GALILEO=3
int32 BEIDOU=4
int32 QZSS=5

int32 constellation
int32 prn

uint32 carrier_frequency
float64 pseudorange
float32 pseudorange_std_dev
float64 carrier_phase
float32 carrier_phase_std_dev
float32 doppler
float32 doppler_std_dev
int32 cno
int32 lock_time
"""
  # Pseudo-constants
  GPS = 0
  GLONASS = 1
  SBAS = 2
  GALILEO = 3
  BEIDOU = 4
  QZSS = 5

  __slots__ = ['constellation','prn','carrier_frequency','pseudorange','pseudorange_std_dev','carrier_phase','carrier_phase_std_dev','doppler','doppler_std_dev','cno','lock_time']
  _slot_types = ['int32','int32','uint32','float64','float32','float64','float32','float32','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       constellation,prn,carrier_frequency,pseudorange,pseudorange_std_dev,carrier_phase,carrier_phase_std_dev,doppler,doppler_std_dev,cno,lock_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RangeInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.constellation is None:
        self.constellation = 0
      if self.prn is None:
        self.prn = 0
      if self.carrier_frequency is None:
        self.carrier_frequency = 0
      if self.pseudorange is None:
        self.pseudorange = 0.
      if self.pseudorange_std_dev is None:
        self.pseudorange_std_dev = 0.
      if self.carrier_phase is None:
        self.carrier_phase = 0.
      if self.carrier_phase_std_dev is None:
        self.carrier_phase_std_dev = 0.
      if self.doppler is None:
        self.doppler = 0.
      if self.doppler_std_dev is None:
        self.doppler_std_dev = 0.
      if self.cno is None:
        self.cno = 0
      if self.lock_time is None:
        self.lock_time = 0
    else:
      self.constellation = 0
      self.prn = 0
      self.carrier_frequency = 0
      self.pseudorange = 0.
      self.pseudorange_std_dev = 0.
      self.carrier_phase = 0.
      self.carrier_phase_std_dev = 0.
      self.doppler = 0.
      self.doppler_std_dev = 0.
      self.cno = 0
      self.lock_time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2iIdfd3f2i().pack(_x.constellation, _x.prn, _x.carrier_frequency, _x.pseudorange, _x.pseudorange_std_dev, _x.carrier_phase, _x.carrier_phase_std_dev, _x.doppler, _x.doppler_std_dev, _x.cno, _x.lock_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.constellation, _x.prn, _x.carrier_frequency, _x.pseudorange, _x.pseudorange_std_dev, _x.carrier_phase, _x.carrier_phase_std_dev, _x.doppler, _x.doppler_std_dev, _x.cno, _x.lock_time,) = _get_struct_2iIdfd3f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2iIdfd3f2i().pack(_x.constellation, _x.prn, _x.carrier_frequency, _x.pseudorange, _x.pseudorange_std_dev, _x.carrier_phase, _x.carrier_phase_std_dev, _x.doppler, _x.doppler_std_dev, _x.cno, _x.lock_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.constellation, _x.prn, _x.carrier_frequency, _x.pseudorange, _x.pseudorange_std_dev, _x.carrier_phase, _x.carrier_phase_std_dev, _x.doppler, _x.doppler_std_dev, _x.cno, _x.lock_time,) = _get_struct_2iIdfd3f2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iIdfd3f2i = None
def _get_struct_2iIdfd3f2i():
    global _struct_2iIdfd3f2i
    if _struct_2iIdfd3f2i is None:
        _struct_2iIdfd3f2i = struct.Struct("<2iIdfd3f2i")
    return _struct_2iIdfd3f2i
