# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gnss_driver/Ins.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gnss_driver.msg
import std_msgs.msg

class Ins(genpy.Message):
  _md5sum = "fa4f9086662ec13f5100709ba926f39b"
  _type = "gnss_driver/Ins"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 measurement_time

uint32 INVALID=0
uint32 CONVERGING=1
uint32 GOOD=2

uint32 type
PointLLH position
Point3D euler_angles
Point3D linear_velocity
Point3D angular_velocity
Point3D linear_acceleration

float32[] position_covariance
float32[] euler_angles_covariance
float32[] linear_velocity_covariance
float32[] angular_velocity_covariance
float32[] linear_acceleration_covariance

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: gnss_driver/PointLLH
float64 lon
float64 lat
float64 height

================================================================================
MSG: gnss_driver/Point3D
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  INVALID = 0
  CONVERGING = 1
  GOOD = 2

  __slots__ = ['header','measurement_time','type','position','euler_angles','linear_velocity','angular_velocity','linear_acceleration','position_covariance','euler_angles_covariance','linear_velocity_covariance','angular_velocity_covariance','linear_acceleration_covariance']
  _slot_types = ['std_msgs/Header','float64','uint32','gnss_driver/PointLLH','gnss_driver/Point3D','gnss_driver/Point3D','gnss_driver/Point3D','gnss_driver/Point3D','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,measurement_time,type,position,euler_angles,linear_velocity,angular_velocity,linear_acceleration,position_covariance,euler_angles_covariance,linear_velocity_covariance,angular_velocity_covariance,linear_acceleration_covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ins, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.measurement_time is None:
        self.measurement_time = 0.
      if self.type is None:
        self.type = 0
      if self.position is None:
        self.position = gnss_driver.msg.PointLLH()
      if self.euler_angles is None:
        self.euler_angles = gnss_driver.msg.Point3D()
      if self.linear_velocity is None:
        self.linear_velocity = gnss_driver.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = gnss_driver.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = gnss_driver.msg.Point3D()
      if self.position_covariance is None:
        self.position_covariance = []
      if self.euler_angles_covariance is None:
        self.euler_angles_covariance = []
      if self.linear_velocity_covariance is None:
        self.linear_velocity_covariance = []
      if self.angular_velocity_covariance is None:
        self.angular_velocity_covariance = []
      if self.linear_acceleration_covariance is None:
        self.linear_acceleration_covariance = []
    else:
      self.header = std_msgs.msg.Header()
      self.measurement_time = 0.
      self.type = 0
      self.position = gnss_driver.msg.PointLLH()
      self.euler_angles = gnss_driver.msg.Point3D()
      self.linear_velocity = gnss_driver.msg.Point3D()
      self.angular_velocity = gnss_driver.msg.Point3D()
      self.linear_acceleration = gnss_driver.msg.Point3D()
      self.position_covariance = []
      self.euler_angles_covariance = []
      self.linear_velocity_covariance = []
      self.angular_velocity_covariance = []
      self.linear_acceleration_covariance = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_dI15d().pack(_x.measurement_time, _x.type, _x.position.lon, _x.position.lat, _x.position.height, _x.euler_angles.x, _x.euler_angles.y, _x.euler_angles.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z))
      length = len(self.position_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.position_covariance))
      length = len(self.euler_angles_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.euler_angles_covariance))
      length = len(self.linear_velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.linear_velocity_covariance))
      length = len(self.angular_velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.angular_velocity_covariance))
      length = len(self.linear_acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.linear_acceleration_covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = gnss_driver.msg.PointLLH()
      if self.euler_angles is None:
        self.euler_angles = gnss_driver.msg.Point3D()
      if self.linear_velocity is None:
        self.linear_velocity = gnss_driver.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = gnss_driver.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = gnss_driver.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 132
      (_x.measurement_time, _x.type, _x.position.lon, _x.position.lat, _x.position.height, _x.euler_angles.x, _x.euler_angles.y, _x.euler_angles.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z,) = _get_struct_dI15d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_covariance = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.euler_angles_covariance = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.linear_velocity_covariance = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.angular_velocity_covariance = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.linear_acceleration_covariance = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_dI15d().pack(_x.measurement_time, _x.type, _x.position.lon, _x.position.lat, _x.position.height, _x.euler_angles.x, _x.euler_angles.y, _x.euler_angles.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z))
      length = len(self.position_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.position_covariance.tostring())
      length = len(self.euler_angles_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.euler_angles_covariance.tostring())
      length = len(self.linear_velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.linear_velocity_covariance.tostring())
      length = len(self.angular_velocity_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.angular_velocity_covariance.tostring())
      length = len(self.linear_acceleration_covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.linear_acceleration_covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = gnss_driver.msg.PointLLH()
      if self.euler_angles is None:
        self.euler_angles = gnss_driver.msg.Point3D()
      if self.linear_velocity is None:
        self.linear_velocity = gnss_driver.msg.Point3D()
      if self.angular_velocity is None:
        self.angular_velocity = gnss_driver.msg.Point3D()
      if self.linear_acceleration is None:
        self.linear_acceleration = gnss_driver.msg.Point3D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 132
      (_x.measurement_time, _x.type, _x.position.lon, _x.position.lat, _x.position.height, _x.euler_angles.x, _x.euler_angles.y, _x.euler_angles.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z,) = _get_struct_dI15d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.euler_angles_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.linear_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_dI15d = None
def _get_struct_dI15d():
    global _struct_dI15d
    if _struct_dI15d is None:
        _struct_dI15d = struct.Struct("<dI15d")
    return _struct_dI15d
