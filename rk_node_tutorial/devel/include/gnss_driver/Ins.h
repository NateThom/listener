// Generated by gencpp from file gnss_driver/Ins.msg
// DO NOT EDIT!


#ifndef GNSS_DRIVER_MESSAGE_INS_H
#define GNSS_DRIVER_MESSAGE_INS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <gnss_driver/PointLLH.h>
#include <gnss_driver/Point3D.h>
#include <gnss_driver/Point3D.h>
#include <gnss_driver/Point3D.h>
#include <gnss_driver/Point3D.h>

namespace gnss_driver
{
template <class ContainerAllocator>
struct Ins_
{
  typedef Ins_<ContainerAllocator> Type;

  Ins_()
    : header()
    , measurement_time(0.0)
    , type(0)
    , position()
    , euler_angles()
    , linear_velocity()
    , angular_velocity()
    , linear_acceleration()
    , position_covariance()
    , euler_angles_covariance()
    , linear_velocity_covariance()
    , angular_velocity_covariance()
    , linear_acceleration_covariance()  {
    }
  Ins_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , measurement_time(0.0)
    , type(0)
    , position(_alloc)
    , euler_angles(_alloc)
    , linear_velocity(_alloc)
    , angular_velocity(_alloc)
    , linear_acceleration(_alloc)
    , position_covariance(_alloc)
    , euler_angles_covariance(_alloc)
    , linear_velocity_covariance(_alloc)
    , angular_velocity_covariance(_alloc)
    , linear_acceleration_covariance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _measurement_time_type;
  _measurement_time_type measurement_time;

   typedef uint32_t _type_type;
  _type_type type;

   typedef  ::gnss_driver::PointLLH_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::gnss_driver::Point3D_<ContainerAllocator>  _euler_angles_type;
  _euler_angles_type euler_angles;

   typedef  ::gnss_driver::Point3D_<ContainerAllocator>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef  ::gnss_driver::Point3D_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::gnss_driver::Point3D_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _position_covariance_type;
  _position_covariance_type position_covariance;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _euler_angles_covariance_type;
  _euler_angles_covariance_type euler_angles_covariance;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _linear_velocity_covariance_type;
  _linear_velocity_covariance_type linear_velocity_covariance;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angular_velocity_covariance_type;
  _angular_velocity_covariance_type angular_velocity_covariance;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _linear_acceleration_covariance_type;
  _linear_acceleration_covariance_type linear_acceleration_covariance;



  enum {
    INVALID = 0u,
    CONVERGING = 1u,
    GOOD = 2u,
  };


  typedef boost::shared_ptr< ::gnss_driver::Ins_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_driver::Ins_<ContainerAllocator> const> ConstPtr;

}; // struct Ins_

typedef ::gnss_driver::Ins_<std::allocator<void> > Ins;

typedef boost::shared_ptr< ::gnss_driver::Ins > InsPtr;
typedef boost::shared_ptr< ::gnss_driver::Ins const> InsConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_driver::Ins_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_driver::Ins_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gnss_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'gnss_driver': ['/home/nthom/Documents/ros/rk_node_tutorial/src/gnss_driver/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gnss_driver::Ins_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_driver::Ins_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_driver::Ins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_driver::Ins_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_driver::Ins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_driver::Ins_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_driver::Ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa4f9086662ec13f5100709ba926f39b";
  }

  static const char* value(const ::gnss_driver::Ins_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa4f9086662ec13fULL;
  static const uint64_t static_value2 = 0x5100709ba926f39bULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_driver::Ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_driver/Ins";
  }

  static const char* value(const ::gnss_driver::Ins_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_driver::Ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 measurement_time\n\
\n\
uint32 INVALID=0\n\
uint32 CONVERGING=1\n\
uint32 GOOD=2\n\
\n\
uint32 type\n\
PointLLH position\n\
Point3D euler_angles\n\
Point3D linear_velocity\n\
Point3D angular_velocity\n\
Point3D linear_acceleration\n\
\n\
float32[] position_covariance\n\
float32[] euler_angles_covariance\n\
float32[] linear_velocity_covariance\n\
float32[] angular_velocity_covariance\n\
float32[] linear_acceleration_covariance\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: gnss_driver/PointLLH\n\
float64 lon\n\
float64 lat\n\
float64 height\n\
\n\
================================================================================\n\
MSG: gnss_driver/Point3D\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::gnss_driver::Ins_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_driver::Ins_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.measurement_time);
      stream.next(m.type);
      stream.next(m.position);
      stream.next(m.euler_angles);
      stream.next(m.linear_velocity);
      stream.next(m.angular_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.position_covariance);
      stream.next(m.euler_angles_covariance);
      stream.next(m.linear_velocity_covariance);
      stream.next(m.angular_velocity_covariance);
      stream.next(m.linear_acceleration_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ins_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_driver::Ins_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_driver::Ins_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "measurement_time: ";
    Printer<double>::stream(s, indent + "  ", v.measurement_time);
    s << indent << "type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.type);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::gnss_driver::PointLLH_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "euler_angles: ";
    s << std::endl;
    Printer< ::gnss_driver::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.euler_angles);
    s << indent << "linear_velocity: ";
    s << std::endl;
    Printer< ::gnss_driver::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::gnss_driver::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::gnss_driver::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position_covariance[i]);
    }
    s << indent << "euler_angles_covariance[]" << std::endl;
    for (size_t i = 0; i < v.euler_angles_covariance.size(); ++i)
    {
      s << indent << "  euler_angles_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.euler_angles_covariance[i]);
    }
    s << indent << "linear_velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.linear_velocity_covariance.size(); ++i)
    {
      s << indent << "  linear_velocity_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_velocity_covariance[i]);
    }
    s << indent << "angular_velocity_covariance[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity_covariance.size(); ++i)
    {
      s << indent << "  angular_velocity_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angular_velocity_covariance[i]);
    }
    s << indent << "linear_acceleration_covariance[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration_covariance.size(); ++i)
    {
      s << indent << "  linear_acceleration_covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_acceleration_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_DRIVER_MESSAGE_INS_H
