// Generated by gencpp from file gnss_driver/RangeInfo.msg
// DO NOT EDIT!


#ifndef GNSS_DRIVER_MESSAGE_RANGEINFO_H
#define GNSS_DRIVER_MESSAGE_RANGEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gnss_driver
{
template <class ContainerAllocator>
struct RangeInfo_
{
  typedef RangeInfo_<ContainerAllocator> Type;

  RangeInfo_()
    : constellation(0)
    , prn(0)
    , carrier_frequency(0)
    , pseudorange(0.0)
    , pseudorange_std_dev(0.0)
    , carrier_phase(0.0)
    , carrier_phase_std_dev(0.0)
    , doppler(0.0)
    , doppler_std_dev(0.0)
    , cno(0)
    , lock_time(0)  {
    }
  RangeInfo_(const ContainerAllocator& _alloc)
    : constellation(0)
    , prn(0)
    , carrier_frequency(0)
    , pseudorange(0.0)
    , pseudorange_std_dev(0.0)
    , carrier_phase(0.0)
    , carrier_phase_std_dev(0.0)
    , doppler(0.0)
    , doppler_std_dev(0.0)
    , cno(0)
    , lock_time(0)  {
  (void)_alloc;
    }



   typedef int32_t _constellation_type;
  _constellation_type constellation;

   typedef int32_t _prn_type;
  _prn_type prn;

   typedef uint32_t _carrier_frequency_type;
  _carrier_frequency_type carrier_frequency;

   typedef double _pseudorange_type;
  _pseudorange_type pseudorange;

   typedef float _pseudorange_std_dev_type;
  _pseudorange_std_dev_type pseudorange_std_dev;

   typedef double _carrier_phase_type;
  _carrier_phase_type carrier_phase;

   typedef float _carrier_phase_std_dev_type;
  _carrier_phase_std_dev_type carrier_phase_std_dev;

   typedef float _doppler_type;
  _doppler_type doppler;

   typedef float _doppler_std_dev_type;
  _doppler_std_dev_type doppler_std_dev;

   typedef int32_t _cno_type;
  _cno_type cno;

   typedef int32_t _lock_time_type;
  _lock_time_type lock_time;



  enum {
    GPS = 0,
    GLONASS = 1,
    SBAS = 2,
    GALILEO = 3,
    BEIDOU = 4,
    QZSS = 5,
  };


  typedef boost::shared_ptr< ::gnss_driver::RangeInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gnss_driver::RangeInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RangeInfo_

typedef ::gnss_driver::RangeInfo_<std::allocator<void> > RangeInfo;

typedef boost::shared_ptr< ::gnss_driver::RangeInfo > RangeInfoPtr;
typedef boost::shared_ptr< ::gnss_driver::RangeInfo const> RangeInfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gnss_driver::RangeInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gnss_driver::RangeInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gnss_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'gnss_driver': ['/home/nthom/Documents/ros/rk_node_tutorial/src/gnss_driver/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gnss_driver::RangeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gnss_driver::RangeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_driver::RangeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gnss_driver::RangeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_driver::RangeInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gnss_driver::RangeInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gnss_driver::RangeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6792b8c07d815111a6e39320c1f1b541";
  }

  static const char* value(const ::gnss_driver::RangeInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6792b8c07d815111ULL;
  static const uint64_t static_value2 = 0xa6e39320c1f1b541ULL;
};

template<class ContainerAllocator>
struct DataType< ::gnss_driver::RangeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gnss_driver/RangeInfo";
  }

  static const char* value(const ::gnss_driver::RangeInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gnss_driver::RangeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 GPS=0\n\
int32 GLONASS=1\n\
int32 SBAS=2\n\
int32 GALILEO=3\n\
int32 BEIDOU=4\n\
int32 QZSS=5\n\
\n\
int32 constellation\n\
int32 prn\n\
\n\
uint32 carrier_frequency\n\
float64 pseudorange\n\
float32 pseudorange_std_dev\n\
float64 carrier_phase\n\
float32 carrier_phase_std_dev\n\
float32 doppler\n\
float32 doppler_std_dev\n\
int32 cno\n\
int32 lock_time\n\
";
  }

  static const char* value(const ::gnss_driver::RangeInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gnss_driver::RangeInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.constellation);
      stream.next(m.prn);
      stream.next(m.carrier_frequency);
      stream.next(m.pseudorange);
      stream.next(m.pseudorange_std_dev);
      stream.next(m.carrier_phase);
      stream.next(m.carrier_phase_std_dev);
      stream.next(m.doppler);
      stream.next(m.doppler_std_dev);
      stream.next(m.cno);
      stream.next(m.lock_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RangeInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gnss_driver::RangeInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gnss_driver::RangeInfo_<ContainerAllocator>& v)
  {
    s << indent << "constellation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.constellation);
    s << indent << "prn: ";
    Printer<int32_t>::stream(s, indent + "  ", v.prn);
    s << indent << "carrier_frequency: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.carrier_frequency);
    s << indent << "pseudorange: ";
    Printer<double>::stream(s, indent + "  ", v.pseudorange);
    s << indent << "pseudorange_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.pseudorange_std_dev);
    s << indent << "carrier_phase: ";
    Printer<double>::stream(s, indent + "  ", v.carrier_phase);
    s << indent << "carrier_phase_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.carrier_phase_std_dev);
    s << indent << "doppler: ";
    Printer<float>::stream(s, indent + "  ", v.doppler);
    s << indent << "doppler_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.doppler_std_dev);
    s << indent << "cno: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cno);
    s << indent << "lock_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lock_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GNSS_DRIVER_MESSAGE_RANGEINFO_H
